NIO编程主要使用ByteBuffer，从功能角度而言，ByteBuffer完全可以满足NIO编程需要，但是由于NIO编程的复杂性，ByteBuffer也有其局限性，主要缺点如下：
    1.ByteBuffer长度固定，一旦分配完成，它的容量不能动态扩展和收缩，当需要编码的POJO对象大于ByteBuffer的容量时，会发生索引越界异常。
    2.ByteBuffer只有一个标识位置的指针position，读写的时候需要手工调用flip()和rewind()等，使用者必须小心谨慎的处理这些API，否则容易导致程序处理失败
    3.ByteBuffer的API功能有限，一些高级和实用的特性它不支持，需要使用者自己实现。

为了弥补这些不足，Netty提供了自己的ByteBuffer实现--ByteBuf

ByteBuf的工作原理：
    通过两个位置指针来协助缓冲区的读写操作，读操作使用readerIndex，写操作使用writeIndex。


disardReadBytes会发生字节数组的内存复制，所以频繁调用会导致性能下降。

从内存分配角度看，ByteBuf可以分两类
    堆内存(HeapByteBuf)直接缓冲区：特点是内存的分配和回收速度快，可以被JVM自动回收，缺点是如果进行了Socket的I/O读写，需要额外做一次内存复制，
    将堆内存对应的缓冲区复制到内核channel中，性能会有一定程度的下降。
    直接内存(DirectByteBuf)直接缓冲区：非堆内存，它在堆外进行内存分配，相比于堆内存，它的分配和回收速度会慢一些，但是将它写入或者从Socket Channel
    中读取时，由于少了一次内存复制，速度比堆内存快

正式以为各有利弊，所以Netty提供了多种ByteBuf供开发者使用，经验表明，ByteBuf的最佳时间实在I/O通信线程的读写缓冲区使用DirectByteBuf,后端业务消息
的编解码模块使用HeapByteBuf，这样组合可以达到最佳性能。

从内存回收角度看，ByteBuf也分为两类：基于对象池的ByteBuf和普通ByteBuf。两者的主要区别就是基于对象池的ByteBuf可以重用ByteBuf对象，它自己维护了
一个内存池，可以循环利用创建的ByteBuf，提升内存的使用效率，降低由于高负载导致的频繁GC。使用内存池后的Netty在高负载、大并发的冲击下内存和GC
更加平稳。
尽管推荐使用基于内存池的ByteBuf，但是内存池的管理和维护更加复杂，使用起来也需要更加谨慎，因此，Netty提供了灵活的策略供使用者来做选择。

AbstractByteBuf：读、写、索引、缓冲区、skipBytes
AbstractReferenceCountedByteBuf:主要对引用进行计数
UnpooledHeapByteBuf:基于堆内存进行内存分配的直接缓冲区，每次I/O的读写都会创建一个新的UnpooledHeapByteBuf,频繁进行大块内存的分配和回收
对性能会造成一定影响
PooledBteBuf
    pooeArena是netty的内存池实现类，通过多个chunk组成的大块内存区域，每个chunk有一个或多个page组成。
    回收策略：都是通过状态未来标识内存是否可用，chunk通过二叉树上对节点进行表示，page通过维护块的使用状态标识实现

辅助类：
    1.ByteBufHolder
        byteBuf的容器，对byteBuf进行包装和抽象，由子类具体实现
    2.ByteBufAllocator
        字节缓冲区分配器，根据实现不同，基于内存池的字节缓冲区分配器和普通的字节缓冲区分配器
    3.CompositeByteBuf
        允许多个ByteBuf的实例组装在一起，形成统一视图，类似数据库将多个表的字段组装到一起展示，Netty主要通过Component类型的集合来操作，
        component聚合了byteBuf对象
    4.ByteBufUtil
        提供了一系列操作ByteBuf的静态方法，最有用的就是对字符串的编解码











