服务端启动的时候，创建了两个NioEventLoopGroup，它们实际是两个独立的Reactor线程池，一个用于接收客户端的TCP链接，另一个用于
处理I/O相关的读写操作，或者执行系统Task、定时任务Task等
Netty用于接收客户端请求的线程池职责如下：
    1.接收客户端TCP连接，初始化Channel参数
    2.将链路状态变更事件通知给ChannelPipeline
Netty处理I/O操作的Reactor线程池职责如下：
    1.异步读取通信对短的数据报，发送读事件到ChannelPipeline
    2.异步发送消息到通信对端，调用ChannelPipeline的消息发送接口
    3.执行系统调用Task
    4.执行定时任务Task,例如链路空闲状态监测定时任务
通过调整线程池的线程个数，是否共享线程池等方式，Netty的Reactor线程模型可以在单线程、多线程和主从多线程间切换，可以最大
程度的满足不同用的个性化定制

Selector的selectNow()方法会立即触发Selector的选择操作，如果有准备就绪的Channel，则返回就绪Channel的集合，否则返回0.




Funture和Promise
Future用于获取异步操作的结果，而Promise则比较抽象，无法直接猜测出其功能。
ChannelFuture有两种状态：uncompleted和completed，当开始一个I/O操作时，一个新的ChannelFuture被创建，此时处于uncompleted状态
（非成功、非失败、非取消），因为I/O操作还没有完成，一旦I/O操作完成，channelFuture将被设置成completed（操作成功、失败、被取消）。

推荐通过GenericFutureListener代替ChannelFuture的get等方法原因：异步I/O操作完成的时间是无法确定的，因此监听器是最佳解决方案。

不要在ChannelHandler中调用ChannelFuture的await()方法，这会导致死锁。原因是发起I/O操作之后，由I/O线程负责异步通知发起I/O操作
的用户线程，如果I/O线程和用户线程是同一个线程，就会导致I/O线程等待自己通知操作完成，这就导致了死锁。

ChannelFuture超时并不代表I/O超时，这意味着ChannelFuture超时后，如果没有关闭连接资源，随后连接依旧可能成功，这会导致严重的问题，
所以通常情况下，必须要考虑是设置I/O超时还是ChannelFuture超时。


实现线程的方式：

